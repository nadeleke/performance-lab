CREATE KEYSPACE IF NOT EXISTS datamill WITH REPLICATION = {'class': 'SimpleStrategy', 'replication_factor' : 2};
USE datamill;
DROP TABLE avg_hw_cpu_arch;
DROP TABLE avg_hw_cpu_mhz;
DROP TABLE avg_hw_gpu_mhz;
DROP TABLE avg_hw_num_cpus;
DROP TABLE avg_hw_page_sz;
DROP TABLE avg_hw_ram_mhz;
DROP TABLE avg_hw_ram_sz;
DROP TABLE avg_sw_address_randomization;
DROP TABLE avg_sw_autogroup;
DROP TABLE avg_sw_compiler;
DROP TABLE avg_sw_drop_caches;
DROP TABLE avg_sw_env_padding;
DROP TABLE avg_sw_filesystem;
DROP TABLE avg_sw_freq_scaling;
DROP TABLE avg_sw_link_order;
DROP TABLE avg_sw_opt_flag;
DROP TABLE avg_sw_swap;
DROP TABLE avg_sw_sys_time;
CREATE TABLE avg_hw_cpu_arch (experiment_id int, hw_cpu_arch text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, hw_cpu_arch));
CREATE TABLE avg_hw_cpu_mhz (experiment_id int, hw_cpu_mhz int, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, hw_cpu_mhz));
CREATE TABLE avg_hw_gpu_mhz (experiment_id int, hw_gpu_mhz int, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, hw_gpu_mhz));
CREATE TABLE avg_hw_num_cpus (experiment_id int, hw_num_cpus int, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, hw_num_cpus));
CREATE TABLE avg_hw_page_sz (experiment_id int, hw_page_sz int, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, hw_page_sz));
CREATE TABLE avg_hw_ram_mhz (experiment_id int, hw_ram_mhz int, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, hw_ram_mhz));
CREATE TABLE avg_hw_ram_sz (experiment_id int, hw_ram_sz int, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, hw_ram_sz));
CREATE TABLE avg_sw_address_randomization (experiment_id int, sw_address_randomization text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_address_randomization));
CREATE TABLE avg_sw_autogroup (experiment_id int, sw_autogroup text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_autogroup));
CREATE TABLE avg_sw_compiler (experiment_id int, sw_compiler text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_compiler));
CREATE TABLE avg_sw_drop_caches (experiment_id int, sw_drop_caches text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_drop_caches));
CREATE TABLE avg_sw_env_padding (experiment_id int, sw_env_padding int, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_env_padding));
CREATE TABLE avg_sw_filesystem (experiment_id int, sw_filesystem text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_filesystem));
CREATE TABLE avg_sw_freq_scaling (experiment_id int, sw_freq_scaling text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_freq_scaling));
CREATE TABLE avg_sw_link_order (experiment_id int, sw_link_order text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_link_order));
CREATE TABLE avg_sw_opt_flag (experiment_id int, sw_opt_flag text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_opt_flag));
CREATE TABLE avg_sw_swap (experiment_id int, sw_swap text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_swap));
CREATE TABLE avg_sw_sys_time (experiment_id int, sw_sys_time text, setup_time double, run_time double, collect_time double, PRIMARY KEY (experiment_id, sw_sys_time));
